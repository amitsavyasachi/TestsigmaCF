import java.lang.Exception;
import java.util.ArrayList;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.Keys;
import com.testsigma.customfunc.common.TestsigmaCustomFunctions;
import com.testsigma.customfunc.common.CustomTestStep;
import com.testsigma.customfunc.result.ResultConstants;
import com.testsigma.customfunc.result.TestStepResult;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;


public class UtilityFunctions extends TestsigmaCustomFunctions{
  @CustomTestStep
  public TestStepResult jsExecutorDoubleClick(String locator){
    //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{
      WebElement element=driver.findElement(By.xpath(locator));
      JavascriptExecutor js=(JavascriptExecutor)driver;
      js.executeScript("var evt = document.createEvent('MouseEvents');"+ "evt.initMouseEvent('dblclick',true, true, window, 0,0, 0, 0, 0, false, false, false, false, 0,null);"+ "arguments[0].dispatchEvent(evt);", element);
      result.setMessage("Javascript Executor Double click success");
      result.setStatus(ResultConstants.SUCCESS);
    }catch(Exception e){
      result.setMessage("Javascript Executor Double click failed");
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
  }
  
  @CustomTestStep
  public TestStepResult jsExecutorMouseClick(String locator){
    //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{
      WebElement element=driver.findElement(By.xpath(locator));
      JavascriptExecutor js=(JavascriptExecutor)driver;
      js.executeScript("arguments[0].dispatchEvent(new MouseEvent('click'))", element);
      result.setMessage("Javascript Executor Mouse click success");
      result.setStatus(ResultConstants.SUCCESS);
    }catch(Exception e){
      result.setMessage("Javascript Executor Mouse click failed");
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
  }
  
  
  @CustomTestStep
  public TestStepResult jsExecutorRightClick(String locator){
    //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{
      JavascriptExecutor js=(JavascriptExecutor)driver;
        js.executeScript("var ele = document.evaluate(//div[@class='package']//div[@class='task-name' and text()='package1 '], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;var e = ele.ownerDocument.createEvent('MouseEvents');e.initMouseEvent('contextmenu', true, true, ele.ownerDocument.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 2, null);!ele.dispatchEvent(e);");
       result.setMessage("Javascript Executor Right click passed");
      result.setStatus(ResultConstants.SUCCESS);
    }catch(Exception e){
      result.setMessage("Javascript Executor Right click failed"+e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
  }
  
  
  @CustomTestStep
  public TestStepResult shadowElementClick(String JsQuery) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{

      JavascriptExecutor js=(JavascriptExecutor)driver;
      WebElement shadowElement = (WebElement) js.executeScript(JsQuery);
      shadowElement.click();
      result.setMessage("shadowElementClick success");
      result.setStatus(ResultConstants.SUCCESS);
      }catch(Exception e){
      result.setMessage("shadowElementClick failed"+e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
  @CustomTestStep
  public TestStepResult shadowElementGetText(String JsQuery) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{

      JavascriptExecutor js=(JavascriptExecutor)driver;
      WebElement shadowElement = (WebElement) js.executeScript(JsQuery);
      String text= shadowElement.getText();
      result.setMessage("shadowElement get text success" +text);
      result.setStatus(ResultConstants.SUCCESS);
      }catch(Exception e){
      result.setMessage("shadowElement get text failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
  @CustomTestStep
  public TestStepResult shadowElementValidateText(String JsQuery,String ExpectedResult) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{

      JavascriptExecutor js=(JavascriptExecutor)driver;
      WebElement shadowElement = (WebElement) js.executeScript(JsQuery);
      String actualText= shadowElement.getText();
      if(ExpectedResult.equals(actualText)){
      result.setMessage("Actual result is matched with expected result" +actualText);
      result.setStatus(ResultConstants.SUCCESS);
      }
      else{
         result.setMessage("Actual result is not matched with expected result"+actualText);
      result.setStatus(ResultConstants.FAILURE);  
      }
      }catch(Exception e){
      result.setMessage("shadowElement get text failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
  @CustomTestStep
  public TestStepResult shadowElementAttachFile(String JsQuery,String FilePath) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{
      String parentWindow= driver.getWindowHandle();
     /* driver.findElement(By.cssSelector("body")).sendKeys(Keys.CONTROL +"t");
      ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
      driver.switchTo().window(tabs.get(1));
      driver.get(FilePath);
      Thread.sleep(10000);*/
      ((JavascriptExecutor)driver).executeScript("window.open()");
      ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
      driver.switchTo().window(tabs.get(1));
       driver.get(FilePath);
      Thread.sleep(10000);
      driver.switchTo().window(tabs.get(0));
      //driver.switchTo().window(parentWindow);
      JavascriptExecutor js=(JavascriptExecutor)driver;
      WebElement shadowElement = (WebElement) js.executeScript(JsQuery);
      shadowElement.sendKeys("C:\\Users\\Administrator\\Downloads\\mark-potterton-sNVkn3507Oo-unsplash.jpg");
      result.setMessage("shadowElementAttachFile success");
      result.setStatus(ResultConstants.SUCCESS);
      }catch(Exception e){
      result.setMessage("shadowElementAttachFile failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
   @CustomTestStep
  public TestStepResult shadowElementAttachFileFromLocal(String JsQuery,String FilePath) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{
      JavascriptExecutor js=(JavascriptExecutor)driver;
      WebElement shadowElement = (WebElement) js.executeScript(JsQuery);
      shadowElement.sendKeys(FilePath);
      result.setMessage("shadowElementAttachFileFromLocal success");
      result.setStatus(ResultConstants.SUCCESS);
      }catch(Exception e){
      result.setMessage("shadowElementAttachFileFromLocal failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
  
  @CustomTestStep
  public TestStepResult SelectDate(String Month, int Year, String Day) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{

     JavascriptExecutor js=(JavascriptExecutor)driver;
      js.executeScript("return document.querySelector('div.picker-columns.sc-ion-picker-md').scrollTop(500)");
		WebElement month = (WebElement) js.executeScript("return document.querySelector('ion-picker-column.sc-ion-picker-md.md.picker-col.picker-opts-right.hydrated > div > button:nth-child(9)')");
		WebElement date = (WebElement) js.executeScript("return document.querySelector('div.picker-columns.sc-ion-picker-md > ion-picker-column:nth-child(3) > div > button:nth-child(27)')");
		int dif = 2021 - Year;
		String yr = String.valueOf(dif);
		WebElement year = (WebElement) js.executeScript("return document.querySelector('ion-picker-column.sc-ion-picker-md.md.picker-col.picker-opts-left.hydrated > div > button:nth-child(2)')");
		month.click();
		//date.click();
		//year.click();
      result.setMessage("SelectDate success");
      result.setStatus(ResultConstants.SUCCESS);
      }catch(Exception e){
      result.setMessage("SelectDate failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
   @CustomTestStep
  public TestStepResult SelectDateFromDatePicker(int Month, int Year, int Date) {
     //your custom code starts here
    TestStepResult result = new TestStepResult();
    try{

    WebElement month = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[1]"));
	WebElement date = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[2]"));
	WebElement year = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[3]"));
      
      int actMonth = Integer.valueOf(month.getAttribute("opt-index"));
		if(actMonth < Month-1){
			while(actMonth != Month-1){
				WebElement NextMonth = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[1]/following::button[1]"));
				NextMonth.click();
				actMonth = Integer.valueOf(NextMonth.getAttribute("opt-index"));
				if(actMonth==Month-1){
                  result.setMessage("Month Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}
		if(actMonth > Month-1){
			while(actMonth != Month-1){
				WebElement NextMonth = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[1]/preceding::button[1]"));
				NextMonth.click();
				actMonth = Integer.valueOf(NextMonth.getAttribute("opt-index"));
				if(actMonth==Month-1){
                  result.setMessage("Month Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}  
      
      
    int actDay = Integer.valueOf(date.getAttribute("opt-index"));
		if(actDay < Date-1){
			while(actDay != Date-1){
				WebElement Nextdate = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[2]/following::button[1]"));
				Nextdate.click();
				actDay = Integer.valueOf(Nextdate.getAttribute("opt-index"));
				if(actDay==Date-1){
                  result.setMessage("Date Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}
		if(actDay > Date-1){
			while(actDay != Date-1){
				WebElement Nextdate = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[2]/preceding::button[1]"));
				Nextdate.click();
				actDay = Integer.valueOf(Nextdate.getAttribute("opt-index"));
				if(actDay==Date-1){
                  result.setMessage("Date Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}  
      
      
      int actyear = Integer.valueOf(year.getText());
		if(actyear > Year){
			while(actyear != Year){
				WebElement NextYear = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[3]/following::button[1]"));
				NextYear.click();
				actyear = Integer.valueOf(NextYear.getText());
				if(actyear==Year){
                   result.setMessage("Year Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}
		if(actyear < Year){
			while(actyear != Year){
				WebElement NextYear = driver.findElement(By.xpath("(//button[@class='picker-opt picker-opt-selected'])[3]/preceding::button[1]"));
				NextYear.click();
				actyear = Integer.valueOf(NextYear.getText());
				if(actyear==Year){
                   result.setMessage("Year Selection success");
      result.setStatus(ResultConstants.SUCCESS);
					break;
				}
			}
		}
      
      }catch(Exception e){
      result.setMessage("SelectDateFromDatePicker failed" +e);
      result.setStatus(ResultConstants.FAILURE);  
    }
    finally{
    return result;
    }
}
  
    @CustomTestStep
  public TestStepResult SelectDateFromDatePicker2(int Month, int Year, int Date) {
     //your custom code starts here
      TestStepResult result = new TestStepResult();
      try{        
        Path path=Paths.get("testsigma-storage:/livbim.io/uploads/11/21/dnd_for_testsigma.js");
        String content = new String(Files.readAllBytes(path));
     
      	JavascriptExecutor js=(JavascriptExecutor)driver;
      	js.executeScript(content);
      	result.setMessage("Javascript Executor external script run success");
      	result.setStatus(ResultConstants.SUCCESS);
      }
      catch(Exception e){
        result.setMessage("SelectDateFromDatePicker failed" +e);
        result.setStatus(ResultConstants.FAILURE);  

      }
      return result;

	}
}
